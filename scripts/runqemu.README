Using qemu with poky notes
==========================

Poky can generate qemu bootable kernels and images with can be used 
on a desktop system. Both arm and x86 images can currently be booted. 
The runqemu script is run as: 

   runqemu <target> <type> <zimage> <filesystem>

where:

   <target> is "qemuarm" or "qemux86"
   <type> is "ext2" or "nfs"
   <zimage> is the path to a kernel (zimage-qemuarm.bin)
   <filesystem> is the path to an ext2 image (filesystem-qemuarm.ext2)

It will default to the qemuarm, ext2 and the last kernel and oh-image-pda 
image built by poky.

NFS Image Notes
===============

As root;

% apt-get install nfs-kernel-server

% mkdir /srv/nfs/qemuarm

Edit via /etc/exports :

# /etc/exports: the access control list for filesystems which may be exported
#               to NFS clients.  See exports(5).
/srv/nfs/qemuarm 192.168.7.2(rw,no_root_squash)

% /etc/init.d/nfs-kernel-server restart

% modprobe tun

untar build/tmp/deploy/images/<built image>.rootfs.tar.bz2 into /srv/nfs/qemuarm

Finally, launch:

% runqemu <target> nfs

(Substitute qemux86 for qemuarm when using qemux86)

Notes
=====

 - The runqemu script runs qemu with sudo. Change perms on /dev/net/tun to 
   run as non root
 - You can set QEMU_MEMORY env var to control amount of available memory
   ( defaults to 64M )
 - There is a bug in qemu in that means occasionally it will use 100% cpu.
   You will need to restart it in this situation.

More Info
=========

 - See http://o-hand.com/~richard/qemu.html

