#!/bin/bash

# Handle Poky <-> QEmu interface voodoo
#
# Copyright (C) 2006-2007 OpenedHand Ltd.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


if [ "x$BUILDDIR" = "x" ]; then
    # BUILDDIR unset, try and get TMPDIR from bitbake
    type -P bitbake &>/dev/null || {
        echo "You either need bitbake in your PATH or to source poky-init-build-env before running this script" >&2; exit 1; }

    # we have bitbake in PATH, get TMPDIR and BUILD_SYS from the environment
    TMPDIR=`bitbake -e | grep TMPDIR=\" | cut -d '=' -f2 | cut -d '"' -f2`
    BUILD_SYS=`bitbake -e | grep BUILD_SYS=\" | cut -d '=' -f2 | cut -d '"' -f2`
else
    BUILD_ARCH=`uname -m`
    BUILD_OS=`uname | tr '[A-Z]' '[a-z]'`
    BUILD_SYS="$BUILD_ARCH-$BUILD_OS"
    TMPDIR=$BUILDDIR/tmp
fi

if ! (test -d "$TMPDIR"); then
    echo >&2 "Error: no $TMPDIR directory, please re-run the script from the Poky build directory."
    return
fi

SCRIPTSDIR=`dirname "$0"`
INTERNAL_SCRIPT=$SCRIPTSDIR/poky-qemu-internal

if [ "x$1" = "x" ]; then
    echo
    echo "Run as $0 MACHINE IMAGETYPE ZIMAGE IMAGEFILE"
    echo "where:"
    echo "  MACHINE - the machine to emulate (qemuarm, qemux86)"
    echo "  IMAGETYPE - the type of image to run (ext3, nfs) (default: ext3)"
    echo "  ZIMAGE - the kernel to use (optional)"
    echo "  IMAGEFILE - the image file/location to use (optional)"
    exit 1
else
    MACHINE=$1
    shift
fi

if [ "x$1" != "x" ]; then
    TYPE=$1
    shift
else
    TYPE="ext3"
    if [ "$MACHINE" = "akita" ]; then
        TYPE="jffs2"
    fi
    if [ "$MACHINE" = "nokia800" ]; then
        TYPE="jffs2"
    fi
    if [ "$MACHINE" = "spitz" ]; then
        TYPE="ext3"
    fi
fi

if [ "x$1" != "x" ]; then
    ZIMAGE=$1
    shift
fi

if [ "x$1" != "x" ]; then
    HDIMAGE=$1
    shift
fi

if [ "$MACHINE" = "qemuarm" -o "$MACHINE" = "spitz" -o "$MACHINE" = "borzoi" -o "$MACHINE" = "akita" -o "$MACHINE" = "nokia800" ]; then
    if [ "x$ZIMAGE" = "x" ]; then
        ZIMAGE=$TMPDIR/deploy/images/zImage-$MACHINE.bin
    fi
    CROSSPATH=$TMPDIR/sysroots/$BUILD_SYS/arm-poky-linux-gnueabi/bin
fi

function findimage {
    where=$1
    machine=$2
    extension=$3
    names=$4
    for name in $names;
    do 
	fullname=$where/$name-$machine.$extension
        if [ -e "$fullname" ]; then
            HDIMAGE=$fullname
            return
        fi
    done
    echo "Couldn't find image in $where. Attempted image names were:"
    for name in $names;
    do 
        echo $name-$machine.$extension
    done
    exit 1
}

if [ "$MACHINE" = "qemuarm" ]; then
    if [ "$TYPE" = "ext3" ]; then
        if [ "x$HDIMAGE" = "x" ]; then
            T=$TMPDIR/deploy/images
            findimage $T qemuarm ext3 "poky-image-sdk poky-image-sato poky-image-minimal"
        fi
    fi
fi

if [ "$MACHINE" = "qemumips" ]; then
    if [ "x$ZIMAGE" = "x" ]; then
        ZIMAGE=$TMPDIR/deploy/images/vmlinux-$MACHINE.bin
    fi
    if [ "$TYPE" = "ext3" ]; then
        if [ "x$HDIMAGE" = "x" ]; then
            T=$TMPDIR/deploy/images
            findimage $T $MACHINE ext3 "poky-image-sdk poky-image-sato poky-image-minimal"
        fi
    fi
    CROSSPATH=$TMPDIR/sysroots/$BUILD_SYS/usr
fi

if [ "$MACHINE" = "qemuppc" ]; then
    if [ "x$ZIMAGE" = "x" ]; then
        ZIMAGE=$TMPDIR/deploy/images/zImage-$MACHINE.bin
    fi
    if [ "$TYPE" = "ext3" ]; then
        if [ "x$HDIMAGE" = "x" ]; then
            T=$TMPDIR/deploy/images
            findimage $T $MACHINE ext3 "poky-image-sdk poky-image-sato poky-image-minimal"
        fi
    fi
    CROSSPATH=$TMPDIR/sysroots/$BUILD_SYS/usr
fi

if [ "$MACHINE" = "spitz" ]; then
    if [ "$TYPE" = "ext3" ]; then
        if [ "x$HDIMAGE" = "x" ]; then
           HDIMAGE=$TMPDIR/deploy/images/poky-image-sato-spitz.ext3
        fi
    fi
fi

if [ "$MACHINE" = "akita" ]; then
    if [ "$TYPE" = "jffs2" ]; then
        if [ "x$HDIMAGE" = "x" ]; then
           HDIMAGE=$TMPDIR/deploy/images/poky-image-sato-akita.jffs2
        fi
    fi
fi

if [ "$MACHINE" = "nokia800" ]; then
    if [ "$TYPE" = "jffs2" ]; then
        if [ "x$HDIMAGE" = "x" ]; then
           HDIMAGE=$TMPDIR/deploy/images/poky-image-sato-nokia800.jffs2
        fi
    fi
fi


if [ "$MACHINE" = "qemux86" ]; then
    if [ "x$ZIMAGE" = "x" ]; then
        ZIMAGE=$TMPDIR/deploy/images/bzImage-$MACHINE.bin
    fi
    if [ "$TYPE" = "ext3" ]; then
        if [ "x$HDIMAGE" = "x" ]; then
            T=$TMPDIR/deploy/images
            findimage $T qemux86 ext3 "moblin-image-sdk moblin-image-netbook poky-image-sdk poky-image-sato poky-image-minimal"
        fi
    fi
    CROSSPATH=$TMPDIR/sysroots/$BUILD_SYS/usr
fi

if [ "$MACHINE" = "qemuarm" -o "$MACHINE" = "spitz" -o "$MACHINE" = "borzoi" -o "$MACHINE" = "akita" -o "$MACHINE" = "nokia800" ]; then
    TARGET_SYS="arm-poky-linux"
elif [ "$MACHINE" = "qemux86" ]; then
    TARGET_SYS="i586-poky-linux"
elif [ "$MACHINE" = "qemumips" ]; then
    TARGET_SYS="mips-poky-linux"
fi

if [ ! -e $CROSSPATH/$TARGET_SYS/bin/cc ]; then
   ln -s $CROSSPATH/bin/$TARGET_SYS-gcc $CROSSPATH/$TARGET_SYS/bin/cc
fi

if [ ! -e $CROSSPATH/$TARGET_SYS/bin/gcc ]; then
   ln -s $CROSSPATH/bin/$TARGET_SYS-gcc $CROSSPATH/$TARGET_SYS/bin/gcc
fi

CROSSPATH=$TMPDIR/sysroots/$BUILD_SYS/usr/bin:$CROSSPATH:$TMPDIR/cross/bin

. $INTERNAL_SCRIPT
