TODO:

[x] oe package
	[ ] Remove duplicated implementations, and convert everyone to the new
	    data and parse methods.
	[ ] API Sanity Audit.
	[ ] Comment/Docs Audit.
	[.] Implement API testing using doctest.
	[ ] Alter 'export' handling, to support exporting a var without
	    defining the variable.
		format:
		export [VAR[=value] ...]
	[ ] More complex variable setting/conditionals
		Options:
		[ ] Add support for 'anonymous' OE functions in .oe{,class} files.
		    These functions are to be executed immediately at parse time,
		    thereby giving one the ability to exert more control over the set
		    of variables.
		[ ] if/else blocks for conditional variable setting
	[ ] Split oemake's knowledge of AVAILABLE OEFILES from its
	    knowledge of which packages are to be built.
		[ ] Define structure and data exchange format(s) for
		    upstream OE metadata repositories.
		    Possibly follow an 'apt-get' style.  Cache the
		    metadata locally, with a command to update.

	* Build requirements
		[ ] Code will not be automatically updated from CVS
			[ ] Solve by making Fetch use md5.
		[ ] Real life test case: Opie
	[ ] Add "noinherit", as a means of removing an item from the
	    list of classes to inherit.
	[ ] Need a way to specify that you cannot build a given .oe,
	    from the .oe.  Along the lines of portage's ability for
	    an ebuild to specify that it isnt buildable for a given
	    architecture or set of architectures.
	[ ] .oe needs access to PROVIDES information that oemake is
	    currently populating.  Move the default set of the .oe
	    provides into the .oe parser rather than oemake.
	[ ] Write helper functions ala ebuild's dobin/dodoc/etc and debian's dh_*.
		[ ] Note, if we do this using actual commands within the .oe file
		    as opposed to shell helpers, the buildsystem is then aware
		    of what files are libs, what are includes, etc, and we could
		    then do a sane automatic population of staging based on that
		    information. 
	[ ] Metadata exchange through multiple oebuild/oemake/oespawn executions
	    (i.e. to set qpedir/qtdir for all builds from the qt/opie/qtopia .oe's)
	[ ] Possibility: split staging by package, and maintain links based on
	    the base atom vs base+version, that sort of thing.  Automatically add
	    proper include and lib paths to the flags variables based on the items
	    in DEPENDS.  This 1) prevent unintentional include/link to the wrong
	    version of things, if multiple versions of things are floating around,
	    and 2) gives us a means of do_clean wiping out a given package's staging
	    items.
	[ ] Split staging by package
		[ ] When a package populates staging, create links for every item
		    that this .oe Provides.
			[ ] Wouldnt be a bad idea to make use of update-alternatives
			    to manage buildroot's staging links, thereby allowing us
			    to deal with multiple provides sanely (priority).
		[ ] More complex set of FLAGS vars, to account for the various DEPENDS.
		[ ] Example:
			ipkg depends on virtual/libc, puts staging_dir/libc in flags.
			glibc staging creates symlinks for every atom it PROVIDES,
			and installs its staging files into the glibc-ver-rev dir.
	
[ ] oebuild
	[ ] Implement and test check_md5, taking nostamp into account.
	[ ] Add '--undo'/'-u' cmdline opt that calls the 'undo' task
	    for the supplied task.
	[ ] Add '--rebuild'/'-r' cmdline opt that calls the 'undo' task
	    for the entire upward path in the digraph, then builds that task.
	    (same thing done when the md5 changes on an affected var in
	     check_md5)

[.] oemake
	[ ] Check for recursive dependency
	[ ] Deal with multiple provides

[.] oemaked
	[ ] Monitor the stamps for a given .oe file as well, to ensure
	    changes in build state as well as changes to build metadata result
	    in a rebuild.

[ ] oerootfs
[ ] oeimage

[ ] packages
	[ ] add cross binutils and binutils
	[ ] add gcc
	[ ] figure out where to put the glibc install into the toolchain dir,
	    which is only needed by gcc pass 2.
	[ ] add qtopia 1.6.1
	[.] add qt 2.3.6
	[ ] convert packages from OpenZaurus buildroot
