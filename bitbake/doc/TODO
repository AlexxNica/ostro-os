TODO:

[x] oe package
	[ ] Remove duplicated implementations, and convert everyone to the new
	    data and parse methods.
	[ ] API Sanity Audit.
	[ ] Comment/Docs Audit.
	[ ] BUG: If we only run an update_data after a load of an .oe,
	    but not for a .oeclass, if multiple .oeclasses define, say, for
	    example DEPENDS_prepend, one overrides the other, and we lose
	    some of the deps.  If we update_data after each .oeclass load,
	    then DEPENDS_prepend affects DEPENDS immediately, but subsequently,
	    it applies against a DEPENDS variable which doesnt yet exist,
	    because the oeclass (in the case of base/INHERIT) is loaded prior
	    to defining DEPENDS in the .oe.  The only solution I see is to
	    pick up _append/_prepend/_delete during the .oe feeder, and
	    append each of them to a list of tasks to do during the
	    update_data run.  I.e. base sets DEPENDS_prepend to content/patcher,
	    then content/patcher ends up in the 'to prepend' list, and is then
	    prepended when update_data runs after the completion of the .oe
	    parse.

[ ] oebuild and oemake
	[ ] Teach the system to support grabbing OEFILES from upstream
	    using our fetch classes.

[ ] oebuild
	[ ] Implement and test check_md5, taking nostamp into account.
	[ ] Add '--undo'/'-u' cmdline opt that calls the 'undo' task
	    for the supplied task.
	[ ] Add '--rebuild'/'-r' cmdline opt that calls the 'undo' task
	    for the entire upward path in the digraph, then builds that task.
	    (same thing done when the md5 changes on an affected var in
	     check_md5)

[.] oemake
	[ ] Check for recursive dependency
	[ ] Deal with multiple provides

[.] oemaked
	[ ] Monitor the stamps for a given .oe file as well, to ensure
	    changes in build state as well as changes to build metadata result
	    in a rebuild.

[ ] packages
	[ ] add cross binutils and binutils
	[ ] add gcc
	[ ] figure out where to put the glibc install into the toolchain dir,
	    which is only needed by gcc pass 2.
	[ ] add qtopia 1.6.1
	[ ] add qt 2.3.6
	[ ] convert packages from OpenZaurus buildroot

[ ] Image creation .oe files and/or external tool
	[ ] Needs
		[ ] Must be able to exert dependency on a .oe file, in order
		    to ensure we have things like mkfs.jffs2, or, at a minimum,
		    display an error when one of our requirements are not
		    satisfied.
		[ ] The ability to exert dependency applies to both
		    rootfs population (ipkg, rpm) and image creation (mkfs.*)
		[ ] If we implement image creation and rootfs population as
		    OE files rather than independent python scripts, we gain
		    said ability, but we then have other concerns.
		    (i.e. ...)

[ ] Once we have the per package deployment code, write a staging oeclass
    that lets you use the FILES blocks for our deployment packages to do the
    installs into the appropriate staging areas, to save time writing do_stage
    functions.
[ ] Write helper functions ala ebuild's dobin/dodoc/etc and debian's dh_*.
	[ ] Note, if we do this using actual commands within the .oe file
	    as opposed to shell helpers, the buildsystem is then aware
	    of what files are libs, what are includes, etc, and we could
	    then do a sane automatic population of staging based on that
	    information. 
[ ] Possibility: split staging by package, and maintain links based on
    the base atom vs base+version, that sort of thing.  Automatically add
    proper include and lib paths to the flags variables based on the items
    in DEPENDS.  This 1) prevent unintentional include/link to the wrong
    version of things, if multiple versions of things are floating around,
    and 2) gives us a means of do_clean wiping out a given package's staging
    items.
