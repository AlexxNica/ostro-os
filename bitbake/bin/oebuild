#!/usr/bin/python

import sys,string,oe


#
# Make output appear like a shell script
#
oe.prepender = '#'
print "#!/bin/bash"


#
# Which build file do we read?
#
if len(sys.argv) == 2:
        file = sys.argv[1]
else:
        file = oe.projectdir+'/oe-test/override-0.1.oe'


#
# Read Configation from these places:
#
# 1.   ${OEDIR}/conf/global.oe
# 2.   ${OEDIR}/conf/local.oe
# 3.   optionally from local.oe
# 4.   optionally from conf/local.oe
#
# Note: it can happen that some file get imported twice, but that is not really a problem
#

oe.inherit_os_env(1)
oe.getconfig(oe.projectdir+'/conf/global.oe', oe.env, 1)
oe.inherit_os_env(2)
try:
	oe.getconfig(oe.projectdir+'/conf/local.oe', oe.env, 1)
except IOError:
	pass
try:
	oe.getconfig('local.oe', oe.env, 1)
except IOError:
	pass
try:
	oe.getconfig('conf/local.oe', oe.env, 1)
except IOError:
	pass
oe.inherit_os_env(3)



#
# Deduce per-package environment variables
#
pkg = oe.catpkgsplit(file)
if pkg == None:
	oe.fatal("package file not in valid format")

oe.setenv('CATEGORY',	pkg[0])
oe.setenv('PN',		pkg[1])
oe.setenv('PV',		pkg[2])
oe.setenv('PR',		pkg[3])
oe.setenv('P',		'${PN}-${PV}')
oe.setenv('PF',		'${P}-${PR}')
oe.setenv('WORKDIR',	'${TMPDIR}/${CATEGORY}/${PF}/work')
oe.setenv('FILESDIR',	'${OEDIR}/${CATEGORY}/${PF}/files')
oe.setenv('S',		'${WORKDIR}/${P}')
oe.setenv('T',		'${TMPDIR}/${CATEGORY}/${PF}/temp')
oe.setenv('D',		'${TMPDIR}/${CATEGORY}/${PF}/image')
oe.setenv('SLOT',	'0')

# TODO: set ${A}

oe.inherit_os_env(4)



#
# Read package definition
#
# 1. ${OEDIR}/file
# 2. optionally look in directories specified in ${OEPATH} for files named
#    a) ${PF}.oe
#    b) ${CATEGORY}/${PF}.oe
#    c) ${P}.oe
#    d) ${CATEGORY}/${P}.oe
#    If one is found, go back to 2.
#

oe.getconfig(file, oe.env)

# Now read local override
if oe.env.has_key('OEPATH'):
	oepath = oe.env['OEPATH']
	for dir in oepath.split(':'):
		try:
			oe.getconfig(dir+'/'+oe.env['PF']+'.oe', oe.env)
			continue
		except IOError:
			try:
				oe.getconfig(dir+'/'+oe.env['CATEGORY']+'/'+oe.env['PF']+'.oe', oe.env)
				continue
			except IOError:
				try:
					oe.getconfig(dir+'/'+oe.env['P']+'.oe', oe.env)
					continue
				except IOError:
					try:
						oe.getconfig(dir+'/'+oe.env['CATEGORY']+'/'+oe.env['P']+'.oe', oe.env)
						continue
					except IOError:
						pass


#
# Environment modification
#
# If one environment variable is named 'VAR_special'
#
# and 'special' is '${CCHOST}': replace ${VAR} with ${VAR_${CCHOST}}
# and 'special' is '${TARGET}': replace ${VAR} with ${VAR_${TARGET}}
# and 'special' is 'append': add ${VAR_${TARGET}} at the end of ${VAR}
# and 'special' is 'prepend': add ${VAR_${TARGET}} at the beginning of ${VAR}
# and 'special' is 'delete': delete all lines in ${VAR} that contain the sub-string ${VAR_${TARGET}}
#

# can't do delete oe.env[...] while iterating over the dictionary, so remember them
dodel = []

for s in oe.env:
	# Handle target overrides
	name = s+'_'+oe.env['TARGET']
	if oe.env.has_key(name):
		oe.env[s] = oe.env[name]
		dodel.append(name)

	# Handle architecture overrides
	name = s+'_'+oe.env['CCHOST']
	if oe.env.has_key(name):
		oe.env[s] = oe.env[name]
		dodel.append(name)

	# Handle line appends:
	name = s+'_append'
	if oe.env.has_key(name):
		oe.env[s] = oe.env[s]+oe.env[name]
		dodel.append(name)

	# Handle line prepends
	name = s+'_prepend'
	if oe.env.has_key(name):
		oe.env[s] = oe.env[name]+oe.env[s]
		dodel.append(name)

	# Handle line deletions
	name = s+'_delete'
	if oe.env.has_key(name):
		new = ''
		pattern = string.replace(oe.env[name],"\n","").strip()
		for line in string.split(oe.env[s],"\n"):
			if line.find(pattern) == -1:
				new = new + '\n' + line
		oe.env[s] = new
		dodel.append(name)

# delete all environment vars no longer needed
for s in dodel:
	del oe.env[s]

oe.inherit_os_env(5)

	
#
# Debug output: do we have any variables that are not mentioned in oe.envdesc[] ?
#
print
for s in oe.env:
	if s == s.lower(): continue		# only care for env vars
	header = 0				# header shown?
	try:
		d = oe.envdesc[s]
	except KeyError:
		if not header:
			oe.note("Nonstandard variables defined in your project:")
			header = 1
		print "#", s
	if header:
		print

#
# Debug output: warn about all missing variables
#
for s in oe.envdesc:
	if not oe.envdesc[s].has_key('warnlevel'): continue
	if not oe.env.has_key(s):
		level = oe.envdesc[s]['warnlevel']
		try: warn = oe.envdesc[s]['warn']
		except KeyError: warn = ''
		if level == 1:
			oe.note('Variable %s is not defined' % s)
			if warn: print '#', warn
		elif level == 2:
			oe.error('Important variable %s is not defined' % s)
			if warn: print '#', warn
		elif level == 3:
			oe.error('Important variable %s is not defined' % s)
			if warn: print '#', warn
			sys.exit(1)


#
# Output all variables
#
print '\nPATH="' + oe.projectdir + '/bin/build:${PATH}"\n'

for s in oe.env:
	if s == s.upper():
		print

		try: print "#" + oe.envdesc[s]['desc'] + ':'
		except KeyError: pass

		if oe.envdesc.has_key(s) and oe.envdesc[s].has_key('export'): print "export",

		print s+'="'+oe.env[s]+'"'
for s in oe.env:
	if s == s.lower():
		print
		print s+'() {'
		print oe.env[s],
		print '}'

print
print "# Create", oe.envdesc['WORKDIR']['desc'] + ':'
print "mkdir -p ${WORKDIR}"
print "# Create", oe.envdesc['S']['desc'] + ':'
print "mkdir -p ${S}"
print "# Create", oe.envdesc['D']['desc'] + ':'
print "mkdir -p ${D}"
print "# Create", oe.envdesc['T']['desc'] + ':'
print "mkdir -p ${T}"

for s in ('pkg_setup', 'pkg_nofetch', 'pkg_fetch', 'src_compile', 'src_install'):
	if oe.env.has_key(s):
		print s,'|| die'
