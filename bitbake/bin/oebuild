#!/usr/bin/python

import sys
sys.path.append('/usr/share/oe')
from oe import *
import os

def usage(errorlevel=0, txt=''):
	global tasks
	if txt:
		print
		print txt

	print "Usage: oebuild [options] <command> <somebuildfile.oe>\n"
	print "  %s\t\t%s" % ("-v, --version", "display oebuild version")
	sys.exit(0)

oebuild_version = 1.0
def version():
	print "OpenEmbedded build tool version %s" % oebuild_version
	print "Source version: %s" % %K%

import getopt
try:
	(opts, args) = getopt.getopt(sys.argv[1:], 'v', [ 'version' ])
except getopt.GetoptError:
	usage(1)

# handle opts
optsonly = [ opt for (opt,val) in opts]
if '--version' in optsonly or '-v' in optsonly:
	version()
	sys.exit(0)

if len(args) < 1:
	usage(1)
if args[0] in ('help', 'usage'):
	usage(0);
if len(args) < 2:
	usage(1)

cfg = data.init()
graph = digraph()

try:
	cfg = parse.handle("conf/oe.conf", cfg)	# Read configuration
except IOError:
	(type, value, traceback) = sys.exc_info()
	fatal("Unable to open oe.conf: %s" % value)

oepath = data.getVar('OEPATH', cfg)
oepath += ":%s" % os.path.abspath(os.path.dirname(args[1]))
data.setVar('OEPATH', oepath, cfg)

from copy import copy
oe = copy(cfg)
try:
	oe = parse.handle(args[1], oe) # read .oe data
except IOError, OSError:
	fatal("Unable to open %s" % args[1])

# sanity check
if oe is None:
	usage(1)

#data.update_env(d)

for var in oe.keys():
	if data.getVarFlag(var, 'handler', oe):
		event.register(data.getVar(var, oe))
		continue

	if not data.getVarFlag(var, 'task', oe):
		continue

	deps = data.getVarFlag(var, 'deps', oe) or []
	postdeps = data.getVarFlag(var, 'postdeps', oe) or []
	build.add_task(var, var, deps)
	for p in postdeps:
		d = build.get_task_data()
		pcontent = data.getVar(p, d) or p
		pdeps = data.getVarFlag(pcontent, 'deps', oe) or []
		pdeps.append(var)
		data.setVarFlag(pcontent, 'deps', pdeps, oe)
		build.add_task(p, pcontent, pdeps)

try:
	build.exec_task(args[0], oe)
except build.FuncFailed:
	fatal("task stack execution failed")
except build.EventException:
	(type, value, traceback) = sys.exc_info()
	e = value.event
	fatal("%s event exception, aborting" % event.getName(e))
