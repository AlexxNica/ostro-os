#!/usr/bin/python

from oe import *
import sys

cfg = data.init()
graph = digraph()

parse.init(".conf", cfg)
data.setVarFlag("OEFILES", "inherit", "1", cfg)
data.setVarFlag("OEDIR", "inherit", "1", cfg)
data.setVarFlag("OEPATH", "inherit", "1", cfg)
data.setVarFlag("PATH", "inherit", "1", cfg)
data.inheritFromOS(1, cfg)

try:
	cfg = parse.handle("conf/oe.conf", cfg)	# Read configuration
except IOError:
	fatal("Unable to open oe.conf")

data.setVar("T", "/tmp", cfg)
cleancmds = """
echo CLEAN
"""
mrpropercmds = """
echo MRPROPER
"""
data.setVar("do_clean", cleancmds, cfg)
data.setVarFlag("do_clean", "func", 1, cfg)
data.setVar("do_mrproper", mrpropercmds, cfg)
data.setVarFlag("do_mrproper", "func", 1, cfg)

build.add_task("do_clean", "do_clean", [ ])
build.add_task("do_mrproper", "do_mrproper", [ "do_clean" ])
try:
	print "exec do_proper"
	build.exec_task("do_mrproper", cfg)
	print "remove do_clean w/o kill, exec do_proper"
	build.remove_task("do_clean", 0)
	build.exec_task("do_mrproper", cfg)
except build.EventException:
	(type, value, traceback) = sys.exc_info()
	e = value.event
	task = getattr(e, 'task', None)
	pkg = getattr(e, 'pkg', None)
	data = getattr(e, 'data', None)
	msg = "%s event exception" % event.getName(e)
	if task or pkg:
		msg += ": "
		if task:
			msg += "task %s" % task
		if pkg:
			msg += "pkg %s" % pkg
	print "%s, aborting" % msg
	sys.exit(1)
