From e939f167cb619cce64d30a4b01694d70e084ffc5 Mon Sep 17 00:00:00 2001
From: Dmitry Kasatkin <d.kasatkin@samsung.com>
Date: Wed, 7 May 2014 15:43:08 +0300
Subject: [PATCH 25/45] ima: provide 'appraise_action=log' policy parameter

It may be a necessary to enable appraisal but run it in permissive mode.
Appraisal result can be added to the measurement list or for auditing,
but system needs to continue running.

This patch provide 'appraise_action=log' option, which allows to ignore
appraisal result.

Signed-off-by: Dmitry Kasatkin <d.kasatkin@samsung.com>
---
 security/integrity/ima/ima_appraise.c |  3 +++
 security/integrity/ima/ima_main.c     |  6 ++++--
 security/integrity/ima/ima_policy.c   | 15 ++++++++++++++-
 security/integrity/integrity.h        |  1 +
 4 files changed, 22 insertions(+), 3 deletions(-)

diff --git a/security/integrity/ima/ima_appraise.c b/security/integrity/ima/ima_appraise.c
index 56e832b..c8bace0 100644
--- a/security/integrity/ima/ima_appraise.c
+++ b/security/integrity/ima/ima_appraise.c
@@ -308,6 +308,9 @@ void ima_update_xattr(struct integrity_iint_cache *iint, struct file *file)
 	if (test_bit(IMA_DIGSIG, &iint->atomic_flags))
 		return;
 
+	if (ima_get_cache_status(iint, FILE_CHECK))
+		return; /* do not fix if failed in permissive mode */
+
 	rc = ima_collect_measurement(iint, file, ima_hash_algo);
 	if (rc < 0)
 		return;
diff --git a/security/integrity/ima/ima_main.c b/security/integrity/ima/ima_main.c
index f73576f..dc76ab02 100644
--- a/security/integrity/ima/ima_main.c
+++ b/security/integrity/ima/ima_main.c
@@ -163,7 +163,7 @@ static int process_measurement(struct file *file, int mask, int function,
 	struct ima_template_desc *template_desc;
 	char *pathbuf = NULL;
 	const char *pathname = NULL;
-	int rc = 0, action, must_appraise = 0;
+	int rc = 0, action, must_appraise = 0, appraise_permit;
 	struct evm_ima_xattr_data *xattr_value = NULL;
 	int xattr_len = 0;
 	bool violation_check;
@@ -186,6 +186,7 @@ static int process_measurement(struct file *file, int mask, int function,
 		return 0;
 
 	must_appraise = action & IMA_APPRAISE;
+	appraise_permit = action & IMA_APPRAISE_PERMIT;
 
 	/*  Is the appraise rule hook specific?  */
 	if (action & IMA_FILE_APPRAISE)
@@ -282,7 +283,8 @@ out:
 	if (must_appraise) {
 		if (iint->flags & IMA_DROP_CAPS)
 			iint->cap_permitted = ctx.appraise->cap_permitted;
-		if (rc && (ima_appraise & IMA_APPRAISE_ENFORCE))
+		if (rc && (ima_appraise & IMA_APPRAISE_ENFORCE) &&
+		    !appraise_permit)
 			return -EACCES;
 		if (file->f_mode & FMODE_WRITE)
 			set_bit(IMA_UPDATE_XATTR, &iint->atomic_flags);
diff --git a/security/integrity/ima/ima_policy.c b/security/integrity/ima/ima_policy.c
index 915c030..ebac8cc 100644
--- a/security/integrity/ima/ima_policy.c
+++ b/security/integrity/ima/ima_policy.c
@@ -390,7 +390,7 @@ enum {
 	Opt_subj_user, Opt_subj_role, Opt_subj_type,
 	Opt_func, Opt_mask, Opt_fsmagic, Opt_uid, Opt_fowner,
 	Opt_appraise_type, Opt_fsuuid, Opt_permit_directio,
-	Opt_cap_drop, Opt_path
+	Opt_cap_drop, Opt_path, Opt_appraise_action
 };
 
 static match_table_t policy_tokens = {
@@ -415,6 +415,7 @@ static match_table_t policy_tokens = {
 	{Opt_permit_directio, "permit_directio"},
 	{Opt_cap_drop, "cap_drop=%s"},
 	{Opt_path, "path=%s"},
+	{Opt_appraise_action, "appraise_action=%s"},
 	{Opt_err, NULL}
 };
 
@@ -768,6 +769,18 @@ static int ima_parse_rule(char *rule, struct ima_rule_entry *entry)
 			} else
 				result = -EINVAL;
 			break;
+		case Opt_appraise_action:
+			if (entry->action != APPRAISE) {
+				result = -EINVAL;
+				break;
+			}
+
+			ima_log_string(ab, "appraise_action", args[0].from);
+			if ((strcmp(args[0].from, "log")) == 0)
+				entry->flags |= IMA_APPRAISE_PERMIT;
+			else
+				result = -EINVAL;
+			break;
 		case Opt_err:
 			ima_log_string(ab, "UNKNOWN", p);
 			result = -EINVAL;
diff --git a/security/integrity/integrity.h b/security/integrity/integrity.h
index 7824adc..89a5afa 100644
--- a/security/integrity/integrity.h
+++ b/security/integrity/integrity.h
@@ -33,6 +33,7 @@
 #define IMA_NEW_FILE		0x04000000
 #define EVM_DIGSIG_REQUIRED	0x08000000
 #define IMA_DROP_CAPS		0x10000000
+#define IMA_APPRAISE_PERMIT	0x20000000
 
 #define IMA_DO_MASK		(IMA_MEASURE | IMA_APPRAISE | IMA_AUDIT | \
 				 IMA_APPRAISE_SUBMASK)
-- 
2.1.4

