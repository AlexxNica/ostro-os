DISTRO = "ostro"
DISTRO_NAME = "Ostro OS"
DISTRO_VERSION = "1.0~M2~snapshot-${DATE}"
SDK_VENDOR = "-ostrosdk"
SDK_VERSION := "${@'${DISTRO_VERSION}'.replace('snapshot-${DATE}','snapshot')}"
SDK_NAME_PREFIX = "ostro"

MAINTAINER = "Ostro Dev <ostro-dev@lists.ostroproject.org>"

TARGET_VENDOR = "-ostro"

OSTRO_DEFAULT_DISTRO_FEATURES = "systemd bluez5 pam"
OSTRO_DEFAULT_EXTRA_RDEPENDS ??= ""
OSTRO_DEFAULT_EXTRA_RRECOMMENDS ??= ""

# Smack security is a distribution feature which can be enabled or
# disabled as needed. To simplify recipes, there is also a smack
# override.
#
# If we have Smack, we can use Cynara. The "dbus-cynara" distro
# feature ensures that we build D-Bus with Cynara support. This locks
# down the D-Bus system and session busses such that apps do not get
# access to D-Bus services unless the service explicitly declares that
# it is ready to deal with talking to less privileged apps.
#
# At the moment, these settings must be kept in sync manually:
# * The "smack" override must be set if and only if the "smack"
#   distro feature is set.
# * The "dbus-cynara" distro feature depends on the "smack",
#   but "smack" can also be used without it.
#
# In other words, to disable the default in a local.conf, change two variables
# like this:
#  OSTRO_SMACK_OVERRIDE = ""
#  OSTRO_DEFAULT_DISTRO_FEATURES_remove = "smack dbus-cynara"
#
# To disable just dbus-cynara, use:
#  OSTRO_DEFAULT_DISTRO_FEATURES_remove = "dbus-cynara"
OSTRO_DEFAULT_DISTRO_FEATURES += "smack dbus-cynara"
OSTRO_SMACK_OVERRIDE ?= ":smack"
DISTROOVERRIDES .= "${OSTRO_SMACK_OVERRIDE}"

# IMA/EVM depend on compiling some components (currently the kernel)
# differently. This distro feature enables that.
OSTRO_DEFAULT_DISTRO_FEATURES += "ima"

# Remove currently unsupported distro features from global defaults
DISTRO_FEATURES_DEFAULT_remove = "x11 3g"

DISTRO_FEATURES ?= "${DISTRO_FEATURES_DEFAULT} ${DISTRO_FEATURES_LIBC} ${OSTRO_DEFAULT_DISTRO_FEATURES}"

# Use 4.1 kernel for core2 and corei7.
# BeagleBone (and others) remain unchanged on default kernel version.
PREFERRED_VERSION_linux-yocto_intel-core2-32 ?= "4.1%"
PREFERRED_VERSION_linux-yocto_intel-corei7-64 ?= "4.1%"

DISTRO_EXTRA_RDEPENDS += " ${OSTRO_DEFAULT_EXTRA_RDEPENDS}"
DISTRO_EXTRA_RRECOMMENDS += " ${OSTRO_DEFAULT_EXTRA_RRECOMMENDS}"

QEMU_TARGETS ?= "arm i386 x86_64"

# Set PREMIRRORS to prioritize Ostro OS autobuilder source cache.
# The OSTRO_SOURCE_MIRROR_URL can be overriden in local.conf. 
OSTRO_SOURCE_MIRROR_URL ??= "http://download.ostroproject.org/bb-cache/sources/"
SOURCE_MIRROR_URL = "${OSTRO_SOURCE_MIRROR_URL}"
INHERIT += "own-mirrors"

VIRTUAL-RUNTIME_init_manager = "systemd"
VIRTUAL-RUNTIME_initscripts = ""
DISTRO_FEATURES_BACKFILL_CONSIDERED = "sysvinit"

require conf/distro/include/ostro_security_flags.inc

OS_RELEASE_FIELDS_append = " BUILD_ID"

# QA check settings - a little stricter than the OE-Core defaults
WARN_TO_ERROR_QA = "already-stripped compile-host-path install-host-path \
                    installed-vs-shipped ldflags pn-overrides rpaths staticdev \
                    useless-rpaths build-deps"
WARN_QA_remove = "${WARN_TO_ERROR_QA}"
ERROR_QA_append = " ${WARN_TO_ERROR_QA}"

# Only specific recipes from the layers in meta-openembedded are
# supported in combination with Ostro OS, even though all of
# meta-openembedded gets imported into the combined repository.
#
# To use recipes from meta-openembedded, they must be added to the
# respective PNWHITELIST variables, here for officially supported ones
# or in a local.conf for inofficial ones in a personal build (_append,
# += and = all work in a local.conf).
#
# To remove white-listing of a layer (i.e. enable all of its recipes),
# remove the layer from PNWHITELIST_LAYERS.
#
# Note that bblayer.conf.sample only adds layers which have enabled
# recipes. Add or remove layers there as needed when changing the white
# lists below.
INHERIT += "whitelist"
PNWHITELIST_REASON = "not supported by ${DISTRO}"

PNWHITELIST_LAYERS = " \
    efl-layer \
    filesystems-layer \
    gnome-layer \
    gpe-layer \
    meta-initramfs \
    meta-python \
    multimedia-layer \
    networking-layer \
    openembedded-layer \
    perl-layer \
    ruby-layer \
    systemd-layer \
    toolchain-layer \
    webserver \
    xfce-layer \
    meta-java \
"

# Using += here so that we extend an earlier value from local.conf
# instead of overwriting it.
PNWHITELIST_efl-layer += ""
PNWHITELIST_filesystems-layer += ""
PNWHITELIST_gnome-layer += ""
PNWHITELIST_gpe-layer += ""
PNWHITELIST_meta-initramfs += ""
PNWHITELIST_meta-python += " \
    python-m2crypto-native \
"
PNWHITELIST_multimedia-layer += ""
PNWHITELIST_networking-layer += " \
    lowpan-tools \
"
PNWHITELIST_openembedded-layer += " \
    gmock \
    gtest \
    libsocketcan \
    can-utils \
    giflib \
    krb5 \
"
PNWHITELIST_perl-layer += ""
PNWHITELIST_ruby-layer += ""
PNWHITELIST_systemd-layer += ""
PNWHITELIST_toolchain-layer += ""
PNWHITELIST_webserver += ""
PNWHITELIST_xfce-layer += ""
PNWHITELIST_meta-java += " \
    openjdk-8-jdk \
    openjdk-8-jre \
    openjdk-7-jre \
    icedtea7-native \
    ant-native \
    rhino \
    ecj-bootstrap-native \
    libecj-bootstrap-native \
    jikes-initial-native \
    jikes-native \
    ecj-initial-native \
    jamvm-native \
    cacao-initial-native \
    classpath-native \
    fastjar-native \
    jsch-native \
    bsf-native \
    xalan-j-native \
    xerces-j-native \
    xml-commons-resolver1.1-native \
    cacao \
    classpath \
    gnumail-native \
    gnujaf-native \
    bcel-native \
    regexp-native \
    log4j1.2-native \
    antlr-native \
    oro-native \
    junit-native \
    jdepend-native \
    commons-net-native \
    commons-logging-native \
    jzlib-native \
    jacl-native \
    jlex-native \
    cup-native \
    jaxp1.3-native \
    inetlib-native \
    servlet2.3-native \
    logkit-native \
    avalon-framework-api-native \
"

# Java bootstrapping
PREFERRED_PROVIDER_virtual/java-initial-native = "cacao-initial-native"
PREFERRED_PROVIDER_virtual/java-native = "jamvm-native"
PREFERRED_PROVIDER_virtual/javac-native = "ecj-bootstrap-native"

# Now the inverse operations for certain recipes from layers like
# OE-core where whitelisting would not be efficient (too many recipes
# would have to be listed).

INHERIT += "blacklist"
PNBLACKLIST[gnome-desktop3] = "Cannot be built due to missing graphics stack, not supported."
PNBLACKLIST[epiphany] = "Cannot be built due to missing graphics stack, not supported."
PNBLACKLIST[connman-gnome] = "Cannot be built due to missing gtk+, not supported."
PNBLACKLIST[gtk-engines] = "Cannot be built due to missing gtk+, not supported."
PNBLACKLIST[gst-player] = "Cannot be built due to missing gtk+, not supported."
PNBLACKLIST[vte] = "Cannot be built due to missing gtk+, not supported."
PNBLACKLIST[matchbox-terminal] = "Cannot be built due to missing gtk+, not supported."
PNBLACKLIST[gtk-sato-engine] = "Cannot be built due to missing gtk+, not supported."
PNBLACKLIST[kernelshark] = "Cannot be built due to missing gtk+, not supported."
PNBLACKLIST[python-pygtk] = "Cannot be built due to missing gtk+, not supported."
PNBLACKLIST[gtk-theme-torturer] = "Cannot be built due to missing gtk+, not supported."
PNBLACKLIST[sysprof] = "Cannot be built due to missing gtk+, not supported."
PNBLACKLIST[libglade] = "Cannot be built due to missing gtk+, not supported."
PNBLACKLIST[avahi-ui] = "Cannot be built due to missing gtk+, not supported."
PNBLACKLIST[oprofileui] = "Cannot be built due to missing gtk+, not supported."
PNBLACKLIST[libfm] = "Cannot be built due to missing gtk+, not supported."
PNBLACKLIST[clutter-1.0] = "Cannot be built due to missing virtual/egl, not supported."
PNBLACKLIST[eglinfo-fb] = "Cannot be built due to missing virtual/egl, not supported."
PNBLACKLIST[mesa-demos] = "Cannot be built due to missing virtual/egl, not supported."
PNBLACKLIST[libva] = "Cannot be built due to missing virtual/egl, not supported."
PNBLACKLIST[libepoxy] = "Cannot be built due to missing virtual/egl, not supported."
PNBLACKLIST[weston] = "Cannot be built due to missing virtual/egl, not supported."
PNBLACKLIST[cogl-1.0] = "Cannot be built due to missing virtual/libglesv2, not supported."
PNBLACKLIST[clutter-gtk-1.0] = "Cannot be built due to missing clutter-1.0, not supported."
PNBLACKLIST[clutter-gst-3.0] = "Cannot be built due to missing clutter-1.0, not supported."
PNBLACKLIST[mx-1.0] = "Cannot be built due to missing clutter-1.0, not supported."
PNBLACKLIST[libwnck3] = "Cannot be built due to missing libxres, not supported."
PNBLACKLIST[gtk+3] = "Cannot be built due to missing libepoxy, not supported."
PNBLACKLIST[gstreamer-vaapi-1.0] = "Cannot be built due to missing libva, not supported."
PNBLACKLIST[libva-intel-driver] = "Cannot be built due to missing libva, not supported."
PNBLACKLIST[gcr] = "Cannot be built due to missing gtk+3, not supported."
PNBLACKLIST[libnotify] = "Cannot be built due to missing gtk+3, not supported."
PNBLACKLIST[packagegroup-core-clutter] = "RDEPENDS on unavailable clutter-1.0/clutter-gst-3.0/clutter-gtk-1.0, not supported."
PNBLACKLIST[va-intel] = "RDEPENDS on unavailable libva, not supported."
PNBLACKLIST[weston-init] = "RDEPENDS on unavailable weston/weston-init-dev, not supported."

# Edison still uses it (for now) and builds its own modified version,
# which conflicts with other machines if we were to also build it there.
PNBLACKLIST_INITRAMFS_BOOT_edison = ""
PNBLACKLIST_INITRAMFS_BOOT = "Only used on Edison."
PNBLACKLIST[initramfs-boot] = "${PNBLACKLIST_INITRAMFS_BOOT}"

# Fixes pending upstream, disabled here because we don't need them.
PNBLACKLIST[python3-setuptools] = "Has undesired (and probably unneeded) machine-dependency"
PNBLACKLIST[python3-pip] = "Depends on unavailable python3-setuptools"
PNBLACKLIST[lttng-tools] = "Has undesired machine-dependency"
PNBLACKLIST[meta-ide-support] = "Has undesired machine-dependency"
PNBLACKLIST[oprofile] = "Has undesired machine-dependency"
PNBLACKLIST[oprofileui-server] = "Has undesired machine-dependency"
RDEPENDS_packagegroup-core-device-devel_remove_pn-packagegroup-core-device-devel = "oprofileui-server"
RDEPENDS_packagegroup-core-tools-profile_remove_pn-packagegroup-core-tools-profile = "lttng-tools"

# Next AppFW update is expected to fix this. Remove this line then.
PNBLACKLIST[example-session] = "Currently broken"

# It is uncertain whether rhino is really an allarch package. It's signature
# is different among machines, causing the iotsstatetests.SStateTests.test_sstate_samesigs
# to fail. We play it save here and make the recipe specific to the tune flags.
# Needs further investigations by upstream.
PACKAGE_ARCH_pn-rhino = "${TUNE_PKGARCH}"
